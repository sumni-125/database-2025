--연습문제
--P420 1,2,3
--4번풀기
--교재 430 연습문제3 풀기( 단일행서브쿼리 )
--교재 434 연습문제1 풀기( 다중행서브쿼리 )
--쿼리 연습하기 실습문제

--429 연습문제 1번
 SELECT * FROM STUDENT;
 SELECT * FROM DEPARTMENT;
 
 SELECT DEPTNO1
 FROM STUDENT
 WHERE NAME = 'Anthony Hopkins';
 
 SELECT S.NAME, D.DNAME
 FROM STUDENT S
 JOIN DEPARTMENT D
 ON s.deptno1 = d.deptno;
 
 SELECT S.NAME, D.DNAME
 FROM STUDENT S
 JOIN DEPARTMENT D
 ON s.deptno1 = d.deptno
 WHERE S.DEPTNO1 = (SELECT DEPTNO1
     FROM STUDENT
     WHERE NAME = 'Anthony Hopkins');
 
 --429 연습문제2번
 SELECT * FROM PROFESSOR;
 SELECT * FROM DEPARTMENT;
 
 SELECT HIREDATE
 FROM PROFESSOR
 WHERE NAME = 'Meg Ryan';
 
 SELECT P.NAME, d.dname, p.hiredate
 FROM DEPARTMENT D
 JOIN PROFESSOR P
 ON d.deptno = p.deptno;
 
 SELECT P.NAME, p.hiredate, d.dname
 FROM DEPARTMENT D
 JOIN PROFESSOR P
 ON d.deptno = p.deptno
 WHERE p.hiredate > (SELECT HIREDATE
 FROM PROFESSOR
 WHERE NAME = 'Meg Ryan');
 
 --430 연습문제3번
 SELECT * FROM student;
 
 SELECT AVG(WEIGHT) FROM STUDENT WHERE DEPTNO1 = 201;
 
 SELECT NAME, WEIGHT
 FROM STUDENT
 WHERE WEIGHT > (SELECT AVG(WEIGHT) FROM STUDENT WHERE DEPTNO1 = 201);
 
 --434 연습문제1
 SELECT * FROM EMP2;
 
 SELECT NAME, POSITION, PAY
 FROM EMP2;
 
 SELECT MIN(PAY)
 FROM EMP2
 WHERE POSITION = 'Section head';
 
 SELECT NAME, POSITION, TO_CHAR(PAY,'$999,999,999')
 FROM EMP2
 WHERE PAY > ANY(SELECT MIN(PAY)
 FROM EMP2
 WHERE POSITION = 'Section head')
 ORDER BY 3 DESC;
 
 --420 연습문제1
 
 SELECT * FROM professor;
 SELECT * FROM DEPARTMENT;
 
 SELECT p.profno, p.name, d.dname
 FROM PROFESSOR P
 JOIN DEPARTMENT D
 ON P.DEPTNO = D.DEPTNO;
 
 CREATE VIEW V_PROF_DEPT2
 AS SELECT p.profno, p.name, d.dname
 FROM PROFESSOR P
 JOIN DEPARTMENT D
 ON P.DEPTNO = D.DEPTNO;
 
 SELECT * FROM V_PROF_DEPT2;
 
 --420 연습문제 2
 SELECT * FROM STUDENT;
 SELECT * FROM DEPARTMENT;
 
 SELECT D.DNAME, S.HEIGHT, s.weight
 FROM STUDENT S
 JOIN DEPARTMENT D
 ON S.DEPTNO1 = D.DEPTNO;
 
 SELECT D.DNAME, MAX(S.HEIGHT) MAX_HEIGHT, MAX(s.weight)MAX_WEIGHT
 FROM STUDENT S
 JOIN DEPARTMENT D
 ON S.DEPTNO1 = D.DEPTNO
 GROUP BY D.DNAME;
 
 --인라인뷰사용
 
 SELECT DEPTNO1, HEIGHT, WEIGHT
 FROM STUDENT;
  
 
 SELECT *
 FROM (SELECT DEPTNO1, MAX(HEIGHT), MAX(WEIGHT)
 FROM STUDENT
 GROUP BY DEPTNO1) S
 JOIN DEPARTMENT D
 ON S.DEPTNO1 = D.DEPTNO;
 
 SELECT D.DNAME, S.MAX_HEIGHT, S.MAX_WEIGHT
 FROM (SELECT DEPTNO1, MAX(HEIGHT) AS MAX_HEIGHT, MAX(WEIGHT)AS MAX_WEIGHT
 FROM STUDENT
 GROUP BY DEPTNO1) S
 JOIN DEPARTMENT D
 ON S.DEPTNO1 = D.DEPTNO;
 
 
 --420 연습문제3
 
 SELECT NAME, HEIGHT
 FROM STUDENT;
 
 SELECT DEPTNO1, MAX(HEIGHT)
 FROM STUDENT
 GROUP BY DEPTNO1;
 
 SELECT D.DNAME, S.MAX_HEIGHT
 FROM (
    SELECT DEPTNO1, MAX(HEIGHT) AS MAX_HEIGHT
    FROM STUDENT
    GROUP BY DEPTNO1) S
 JOIN DEPARTMENT D
 ON S.DEPTNO1 = D.DEPTNO;
 
 SELECT *
 FROM (SELECT D.DNAME, S.MAX_HEIGHT
    FROM (SELECT DEPTNO1, MAX(HEIGHT) AS MAX_HEIGHT
        FROM STUDENT
        GROUP BY DEPTNO1) S
    JOIN DEPARTMENT D
    ON S.DEPTNO1 = D.DEPTNO) M
 JOIN STUDENT S
 ON S.HEIGHT = M.max_height;
 
 
 
 SELECT M.DNAME, M.MAX_HEIGHT, S.NAME, S.HEIGHT
 FROM (
    SELECT D.DNAME, H.MAX_HEIGHT, H.DEPTNO1
    FROM (
        SELECT DEPTNO1, MAX(HEIGHT) AS MAX_HEIGHT
        FROM STUDENT
        GROUP BY DEPTNO1) H
    JOIN DEPARTMENT D
    ON H.DEPTNO1 = D.DEPTNO) M
 JOIN STUDENT S
 ON S.DEPTNO1 = M.DEPTNO1
 WHERE M.MAX_HEIGHT=S.HEIGHT;
 
 --421 연습문제4
 SELECT * FROM STUDENT;
 
 SELECT GRADE, NAME, HEIGHT
 FROM STUDENT;
 
 SELECT GRADE, NAME, HEIGHT
 FROM STUDENT
 ORDER BY 1 ASC;
 
 SELECT GRADE, AVG (HEIGHT)
 FROM STUDENT
 GROUP BY GRADE;
 
 SELECT J.GRADE, J.NAME, J.HEIGHT, F.A
 FROM (
 SELECT GRADE, AVG(HEIGHT) AS "A"
 FROM STUDENT
 GROUP BY GRADE
 ) F
 JOIN STUDENT J
 ON F.GRADE = J.GRADE
 WHERE J.HEIGHT>=F.A
 ORDER BY 1 ASC
 ;
 
 --421 연습문제5
 
 SELECT RANK() OVER(ORDER BY PAY DESC)RANKING, NAME, PAY
 FROM PROFESSOR;
 
 SELECT * 
 FROM(
    SELECT 
    RANK() OVER(ORDER BY PAY DESC)RANKING, NAME, PAY
    FROM PROFESSOR
 )
 WHERE RANKING<6;
 
 --PDF 쿼리 실습문제 풀기
 
 create table goods_tbl_500(
goods_cd varchar2(6) not null primary key, 
goods_nm varchar2(30), 
goods_price number(8), 
cost number(8), in_date date
); 


insert into goods_tbl_500 values('110001','육계장사발면',1050,750,'20190302');
insert into goods_tbl_500 values('110002','단팥빵',1300,800,'20190302'); 
insert into goods_tbl_500 values('110003','사브로',2000,1700,'20190302');
insert into goods_tbl_500 values('110004','칠성사이다',900,750,'20190302'); 
insert into goods_tbl_500 values('110005','콜라',750,300,'20190302'); 
insert into goods_tbl_500 values('110006','아몬드초콜릿',1500,1300,'20190302'); 
insert into goods_tbl_500 values('110007','초코몽',850,600,'20190302');

 create table store_tbl_500(
 store_cd varchar2(5) not null primary key,
 store_nm varchar2(20), 
 store_fg varchar2(1)
);

 insert into store_tbl_500 values('A001','노원점','0');
 insert into store_tbl_500 values('A002','마포점','0'); 
insert into store_tbl_500 values('A003','석계점','0'); 
insert into store_tbl_500 values('B001','하계점','1');
 insert into store_tbl_500 values('C001','상계점','1'); 
insert into store_tbl_500 values('D001','중계점','0');
 insert into store_tbl_500 values('D002','태릉입구점','1'); 
insert into store_tbl_500 values('E001','화랑대점','0');


 create table sale_tbl_500(
 sale_no varchar2(4) not null primary key, 
 sale_ymd date not null,
 sale_fg varchar2(1) not null, 
 store_cd varchar2(5)  ,         
 goods_cd varchar2(6) ,
 sale_cnt number(3),
 pay_type varchar2(2),
 constraint  fk1 foreign key (store_cd)  references store_tbl_500(store_cd),
 constraint  fk2  foreign key (goods_cd) references goods_tbl_500(goods_cd)
); 

insert into sale_tbl_500 values('0001','20190325','1','A001','110001',2,'02'); 
insert into sale_tbl_500 values('0002','20190325','1','B001','110003',2,'02');
 insert into sale_tbl_500 values('0003','20190325','1','D001','110003',1,'01'); 
insert into sale_tbl_500 values('0004','20190325','1','A001','110006',5,'02'); 
insert into sale_tbl_500 values('0005','20190325','1','C001','110003',2,'02'); 
insert into sale_tbl_500 values('0006','20190325','2','C001','110003',2,'02');
 insert into sale_tbl_500 values('0007','20190325','1','A002','110005',4,'02');
 insert into sale_tbl_500 values('0008','20190325','1','A003','110004',4,'02');
 insert into sale_tbl_500 values('0009','20190325','1','B001','110001',2,'01');
 insert into sale_tbl_500 values('0010','20190325','1','A002','110006',1,'02');


COMMIT;

SELECT * FROM GOODS_TBL_500;
SELECT * FROM store_tbl_500;
SELECT * FROM sale_tbl_500;

--SALE_FG 1:판매, 2:취소
--PAY_TYPE 01:현금, 02:카드
--점포별 매출현황
--점포명 현금매출 카드매출 총매출
SELECT * FROM store_tbl_500;
SELECT * FROM sale_tbl_500;

SELECT *
FROM STORE_TBL_500 ST
JOIN SALE_TBL_500 SA
ON st.store_cd = sa.store_cd;

SELECT st.store_nm, go.goods_nm, go.goods_price, sa.sale_cnt,sa.sale_fg, sa.pay_type
FROM GOODS_TBL_500 GO
JOIN SALE_TBL_500 SA
ON sa.goods_cd = go.goods_cd
JOIN STORE_TBL_500 ST
ON st.store_cd = sa.store_cd;

--뷰만들기
CREATE VIEW SELECT_TBL_500
AS
SELECT st.store_nm, go.goods_nm, go.goods_price, sa.sale_cnt,sa.sale_fg, sa.pay_type
FROM GOODS_TBL_500 GO
JOIN SALE_TBL_500 SA
ON sa.goods_cd = go.goods_cd
JOIN STORE_TBL_500 ST
ON st.store_cd = sa.store_cd;

SELECT STORE_NM,SUM(SALE_CNT * GOODS_PRICE)
FROM SELECT_TBL_500
GROUP BY STORE_NM;

SELECT STORE_NM,SALE_CNT * GOODS_PRICE,
DECODE (SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE)
FROM SELECT_TBL_500;

SELECT STORE_NM,
SUM(DECODE (SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE)) AS "총매출"
FROM SELECT_TBL_500
GROUP BY STORE_NM
;

--DECODE (SALE_FG,'1',DECODE(PAY_TYPE,'02',SALE_CNT * GOODS_PRICE,0),-SALE_CNT * GOODS_PRICE)


SELECT STORE_NM,
SUM(DECODE(PAY_TYPE,'01',SALE_CNT * GOODS_PRICE,0)) AS 현금매출,
SUM(DECODE(PAY_TYPE,'02',SALE_CNT * GOODS_PRICE,0)) AS 카드매출,
SUM(DECODE (SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE)) AS "총매출"
FROM SELECT_TBL_500
GROUP BY STORE_NM
;

SELECT STORE_NM,
SUM(DECODE (PAY_TYPE,'01',DECODE(SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE),0)) AS 현금매출,
SUM(DECODE (PAY_TYPE,'02',DECODE(SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE),0)) AS 카드매출,
SUM(DECODE (SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE)) AS 총매출
FROM SELECT_TBL_500
GROUP BY STORE_NM
HAVING SUM(DECODE (SALE_FG,'1',SALE_CNT * GOODS_PRICE,-SALE_CNT * GOODS_PRICE)) > 0
;

SELECT * FROM GOODS_TBL_500;
SELECT * FROM store_tbl_500;
SELECT * FROM sale_tbl_500;

SELECT 
    DECODE(sa.sale_fg,'1','판매','취소') 판매구분, 
    sa.sale_no 판매번호, 
    TO_CHAR(sa.sale_ymd,'YYYY-MM-DD') 판매일자, 
    go.goods_nm 상품명, 
    sa.sale_cnt 판매수량, 
    sa.sale_cnt*go.goods_price 판매금액, 
    DECODE(sa.pay_type,'01','현금','카드') 카드구분
FROM SALE_TBL_500 SA
JOIN STORE_TBL_500 ST
ON SA.STORE_CD = st.store_cd
JOIN GOODS_TBL_500 GO
ON GO.GOODS_CD = SA.GOODS_CD
WHERE ST.STORE_CD = 'A001';




select     st.store_nm,  
             sum(decode(s.pay_type,'01', s.sale_cnt*g.goods_price , 0) )   cash, 
             sum( decode(s.pay_type,'02', s.sale_cnt*g.goods_price, 0 ) )   card,
             sum(decode(s.sale_fg,'2', s.sale_cnt*g.goods_price, 0 ) )   취소,
             sum(s.sale_cnt*g.goods_price)  total,
               sum(s.sale_cnt*g.goods_price)   -   sum(decode(s.sale_fg,'2', s.sale_cnt*g.goods_price, 0 ) )    "판매금액"
from        sale_tbl_500 s
join         goods_tbl_500 g
on          g.goods_cd = s.goods_cd
join         store_tbl_500 st
on          st.store_cd = s.store_cd
group by  st.store_nm;


