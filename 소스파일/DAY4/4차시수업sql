

--그룹함수
--순위구하기

SELECT * FROM ACORNTBL2;

--RANK() 순위구하기
select name, point, rank() over(order by point)
FROM ACORNTBL2;

select name, point, rank() over(order by point DESC )
FROM ACORNTBL2;


--DENSE_RANK

SELECT NAME, POINT, DENSE_RANK() OVER(ORDER BY POINT DESC)
FROM acorntbl2;


--ROW_NUMBER(): 같은등수일때 ROWID를 기준으로 순위를 매김
--ROW ID는 행을 식별하는 고유번호
SELECT NAME, POINT, DENSE_RANK() OVER(ORDER BY POINT DESC)
FROM acorntbl2;


--누적합
--전체합

SELECT NAME, POINT, SUM(POINT) OVER()
FROM ACORNTBL2;

--첫 행에서 현재 행까ㅣ지의 누적합 구하기

SELECT NAME, POINT, SUM(POINT) OVER(ORDER BY POINT)
FROM ACORNTBL2;


SELECT NAME, POINT
FROM acorntbl2;

SELECT NAME, POINT, SUM(POINT) OVER(ORDER BY POINT)
FROM ACORNTBL2;

SELECT NAME, POINT, SUM(POINT) OVER(ORDER BY NAME)
FROM ACORNTBL2;

SELECT NAME, POINT, SUM(POINT) 
                    OVER( ORDER BY POINT
                    Range  BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 
                    )-- 등수가 같으면 같은범위로 인식함
FROM ACORNTBL2;


SELECT NAME, POINT, SUM(POINT) 
                    OVER( ORDER BY POINT
                    ROWS  BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 
                    )
FROM ACORNTBL2;

--UNBOUNDED PRECEDING : 첫 행에서부터
--CURRENT ROW         : 현재행까지

SELECT NAME, POINT, SUM(POINT) OVER(ORDER BY POINT);

--누적합의 범위 지정 (
--range between  unbounded preceding  and current row   (기본임) 
--rows between   unbounded preceding and current row


SELECT * FROM MEMBER_TBL_11;

--포인트 전체합
--포인트 누적합

SELECT M_NAME, M_GRADE, M_POINT
FROM member_tbl_11
WHERE M_POINT IS NOT NULL;


SELECT M_NAME, M_GRADE, M_POINT, SUM(M_POINT) OVER()
FROM member_tbl_11
WHERE M_POINT IS NOT NULL;


SELECT M_NAME, M_GRADE, M_POINT, SUM(M_POINT) OVER(ORDER BY M_POINT)
FROM member_tbl_11
WHERE M_POINT IS NOT NULL;


SELECT M_NAME, M_GRADE, M_POINT, SUM(M_POINT) OVER(ORDER BY M_POINT range between  unbounded preceding  and current row)
FROM member_tbl_11
WHERE M_POINT IS NOT NULL;


SELECT M_NAME, M_GRADE, M_POINT, SUM(M_POINT) OVER(ORDER BY M_POINT ROWS between  unbounded preceding  and current row)
FROM member_tbl_11
WHERE M_POINT IS NOT NULL;

--고객 등급별 포인트 누적합
SELECT M_NAME, M_GRADE, M_POINT, SUM(M_POINT) OVER(ORDER BY M_POINT)
FROM MEMBER_TBL_11;

SELECT M_NAME, M_GRADE, M_POINT, SUM(M_POINT) OVER(PARTITION BY M_GRADE ORDER BY M_POINT)
FROM MEMBER_TBL_11;


--GROUP BY
--ROLL UP : 부분합 구하기 - 선행조건이 GROUP BY 한 후에 집계를 내고 싶을 때 사용

SELECT * FROM MEMBER_TBL_11;

SELECT SUM(M_POINT) FROM MEMBER_TBL_11;

SELECT M_GRADE, M_POINT  FROM MEMBER_TBL_11;

SELECT M_GRADE, SUM(M_POINT) FROM MEMBER_TBL_11
GROUP BY M_GRADE;

--집계
--ROLLUP()

SELECT M_GRADE, SUM(M_POINT) FROM MEMBER_TBL_11
GROUP BY ROLLUP(M_GRADE);


SELECT * FROM TBL_TEST_ORDER;
SELECT * FROM TBL_TEST_GOODS;
SELECT * FROM TBL_TEST_ORDER;


SELECT *
FROM TBL_TEST_ORDER O
JOIN TBL_TEST_GOODS G
ON O.PCODE = G.PCODE;

-- 상품별 판매수량 합계 구하기

SELECT G.PNAME, G.PRICE, O.SALE_CNT
FROM TBL_TEST_ORDER O
JOIN TBL_TEST_GOODS G
ON O.PCODE = G.PCODE;

SELECT G.PNAME, SUM(G.PRICE * O.SALE_CNT)
FROM TBL_TEST_ORDER O
JOIN TBL_TEST_GOODS G
ON O.PCODE = G.PCODE
GROUP BY G.PNAME;

SELECT G.PNAME, SUM(G.PRICE * O.SALE_CNT)
FROM TBL_TEST_ORDER O
JOIN TBL_TEST_GOODS G
ON O.PCODE = G.PCODE
GROUP BY ROLLUP(G.PNAME);
 


--고객별 제품별 판매금액

SELECT * 
FROM TBL_TEST_ORDER O
JOIN tbl_test_customer C
ON C.ID = O.ID
JOIN tbl_test_goods G
ON O.PCODE = G.PCODE;


SELECT C.NAME, G.PNAME, G.PRICE*o.sale_cnt 
FROM TBL_TEST_ORDER O
JOIN tbl_test_customer C
ON C.ID = O.ID
JOIN tbl_test_goods G
ON O.PCODE = G.PCODE;


SELECT C.NAME, G.PNAME, SUM(G.PRICE*o.sale_cnt )
FROM TBL_TEST_ORDER O
JOIN tbl_test_customer C
ON C.ID = O.ID
JOIN tbl_test_goods G
ON O.PCODE = G.PCODE
GROUP BY C.NAME, G.PNAME
ORDER BY 1;


SELECT C.NAME, G.PNAME, SUM(G.PRICE*o.sale_cnt )
FROM TBL_TEST_ORDER O
JOIN tbl_test_customer C
ON C.ID = O.ID
JOIN tbl_test_goods G
ON O.PCODE = G.PCODE
GROUP BY ROLLUP(C.NAME, G.PNAME)
ORDER BY 1;


--고객별 합계
--고객별 제품별 합계
--전체합계


-- LAG() 함수 이전행의 값을 가져올 때 사용( 판매실적 )
SELECT * FROM ACORNTNL2;

SELECT NAME, POINT, LAG(POINT, 1, 0) OVER(ORDER BY POINT)
FROM ACORNTBL2;

--LEAD()함수:  다음행의 값을 가져올 때 사용

SELECT NAME, POINT, LEAD(POINT, 1, 0) OVER(ORDER BY POINT)
FROM ACORNTBL2;


--PIVOT 테이블

SELECT * FROM EMP;

--DECODE로 부서별 직급별 사원 수 구하기
SELECT DECODE( JOB,'CLERK',1), DECODE(JOB,'SALESMAN',1)
FROM EMP;

SELECT COUNT(JOB), COUNT(DECODE( JOB,'CLERK',1)),COUNT( DECODE(JOB,'SALESMAN',1))
FROM EMP;


SELECT DEPTNO, DECODE( JOB,'CLERK',1), DECODE(JOB,'SALESMAN',1)
FROM EMP;


SELECT DEPTNO, COUNT(JOB), COUNT(DECODE( JOB,'CLERK',1)),COUNT( DECODE(JOB,'SALESMAN',1))
FROM EMP
GROUP BY DEPTNO
ORDER BY 1;

--
SELECT * FROM (SELECT DEPTNO, JOB, EMPNO FROM EMP)
PIVOT(
    COUNT(EMPNO) FOR JOB IN('CKERK' AS "CLERK", 'MANAGER' AS "MANAGER", 'SALESMAN' AS "SALESMAN",'PRESIDENT' AS "PRESIDENT",'ANALYST' AS "ANALYST")
);

-- 비율구하기
-- SELECT * FROM MEMBER_TBL_11;
SELECT * FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL;

--
SELECT M_NAME, M_POINT, SUM(M_POINT) OVER(),ROUND( M_POINT / SUM(M_POINT) OVER()*100)
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL;

--RATIO_TO_REPORT 사용하여 비율구하기
SELECT M_NAME, M_POINT,ROUND( RATIO_TO_REPORT(M_POINT) OVER() *100,2)
FROM member_tbl_11
WHERE M_POINT IS NOT NULL;


--참가자 등수 조회
SELECT *
FROM TBL_SCORE_200;
SELECT *
FROM TBL_JOIN_200;

SELECT *
FROM TBL_SCORE_200 S
JOIN tbl_join_200 J
ON S.ARTISTID = J.JOIN_ID;


SELECT S.ARTISTID, J.JOIN_NM, SCORE, SCORE
FROM TBL_SCORE_200 S
JOIN tbl_join_200 J
ON S.ARTISTID = J.JOIN_ID;

SELECT S.ARTISTID, 
       J.JOIN_NM, 
       SUM(SCORE),
       ROUND( AVG(SCORE),2), 
       RANK() OVER(ORDER BY AVG(SCORE) DESC)
FROM TBL_SCORE_200 S
JOIN tbl_join_200 J
ON S.ARTISTID = J.JOIN_ID
GROUP BY S.ARTISTID, J.JOIN_NM;


-- RANK() 순위구하기
-- SUM()  OVER() 
-- LAG()  OVER() 이전행 가져오기
-- LEAD() OVER()다음행 가져오기
-- ROLLUP() 집계 ( 선행조건 GROUP BY)
-- RATIO_TO_REPORT() OVER()
-- PIVOT
